# Laye.Collections

type StackElement
{
   var previous { get private set }
   var value { get private set }

   ctor(@previous, @value);
}

type Stack
{
   private var _top
   var top { get _top.value }

   fn Push(value)
      _top = new StackElement(_top, value)

   fn Dup()
   {
      if top == null ret false
      Push(top)
      true
   }

   fn Pop(outValue)
   {
      if _top == null
      {
         outValue = null
         ret false
      }
      outValue = _top.value
      _top = _top.previous
      true
   }

   fn PopCount(outValues, count)
   {
      outValues = [] outValues.length = count
      var tempRef = ref var temp
      while count > 0
      {
         count - = 1
         if not Pop(tempRef)
            ret false
         outValues[count] = temp
      }
      true
   }

   fn Swap(value, outValue)
   {
      if not Pop(outValue)
         ret false
      Push(value)
      true
   }
}