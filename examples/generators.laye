var name = "Generators"

gen count(n = 5)
   iter (i = 1 to n + 1) yield i

gen acc(n, i)
   while (1) yield n+ = i

gen countEvens(limit)
{
   if (limit != null)
   {
      limit = limit as Int
      if (limit == null)
         throw "Limit must be an Int or convertible to an Int."
      el if (limit < 2)
         throw "Limit must be greater than or equal to 2."
      iter (value = 2 to limit + 2 by 2)
         yield value
   }
   el
   {
      var value = 0
      while (true)
         yield value+ = 2
   }
}

fn main()
{
   println(each (value in count(10)) value)

   var acctor = acc(1, 3)
   println(iter (i = 0 to 10)
      res acctor)

   println(each (value in countEvens(10)) value)

   var evens = countEvens()
   println(iter (i = 0 to 50)
      res evens)
}
