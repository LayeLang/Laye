use Laye.Collections

fn VMExecute(code)
{
   var stack = new Stack
   var codeLength = code.length
   var tempRef = ref var temp
   var xRef = ref var x
   var yRef = ref var y
   var ipRef = ref (var ip = 0)
   while (ip < codeLength)
   {
      (var op = code[ip]) match
      {
         0x01: stack.Dup()
         0x03: stack.Swap(ip, ipRef)
         0x04: stack.Pop(tempRef) stack.Pop(ipRef) stack.Push(temp)
         0x07: stack.Pop(tempRef)
               stack.Pop(yRef) stack.Pop(xRef)
               if y == x ip = temp
         0x18: stack.Push(code[ip + = 1])
         0x40: stack.Pop(yRef) stack.Pop(xRef) stack.Push(x + y)
         0x41: stack.Pop(yRef) stack.Pop(xRef) stack.Push(x - y)
         0x42: stack.Pop(yRef) stack.Pop(xRef) stack.Push(x * y)
         0x43: stack.Pop(yRef) stack.Pop(xRef) stack.Push(x / y)
         0xFF: stack.Pop(tempRef) PrintLn(temp)
         _: op & 0xF0 match
         {
            0x20: stack.Push(if (var num = op & 0x0F) > 7 num - 16 el num)
            _: ret false
         }
      }
      ip + = 1
   }
   true
}

code =
[ 0x18, 10
, 0x18, 07
, 0x03
, 0xFF
, 0x04
, 0x01
, 0x21
, 0x18, 19
, 0x07
, 0x01
, 0x21
, 0x41
, 0x18, 07
, 0x03
, 0x42
, 0x04
]

VMExecute(code)
